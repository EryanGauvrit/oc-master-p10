name: SonarQube Analysis

# Ce workflow est déclenché lorsqu'il est appelé par un autre workflow
on:
  workflow_call:
    # Secrets pour le workflow
    secrets:
      SONAR_TOKEN:
        required: true
        description: 'SonarQube token'
      SONAR_HOST_URL:
        required: true
        description: 'SonarQube server URL'
      SONAR_PROJECT_KEY:
        required: true
        description: 'SonarQube project key'

# Définition des jobs à exécuter dans ce workflow
jobs:

  # Exécute l'analyse du projet avec SonarQube
  analysis:
    name: Projet Analysis with SonarQube
    # S'exécute sur un runner avec une version d'Ubuntu récente
    runs-on: ubuntu-latest

    # Étapes de ce job
    steps:

      # Étape 1 : Récupérer le code du dépôt avec Git
      - uses: actions/checkout@v4
        with:
          # Récupère le code du dépôt avec l'historique complet
          # pour une meilleure pertinence de l'analyse
          fetch-depth: 0

      # Étape 2 : Utiliser le cache de Maven
      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      # Étape 3 : Installer Java 11
      - name: Set up JDK 11
        uses: actions/setup-java@v4
        with:
          java-version: '11'
          distribution: 'temurin'
          architecture: x64

      # Étape 4 : Installer Node.js 18 et récupérer le cache de npm
      - name: Use Node.js 18
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: 'front/package-lock.json'

      # Étape 5 : Installer les dépendances du projet
      - name: Npm install dependencies
        run: npm ci
        working-directory: front

      # Étape 6 : Compiler le frontend
      - name: Build frontend
        run: npm run build
        working-directory: front

      # Étape 7 : Tester le frontend
      - name: Run frontend tests
        run: npm run test:ci
        working-directory: front

      # Étape 8 : Compiler et tester le backend
      - name: Build and test using Maven
        run: mvn --batch-mode --update-snapshots clean package
        working-directory: back

      # Étape 9 : Utiliser le cache de SonarQube
      - name: Cache SonarQube packages
        uses: actions/cache@v4
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      # Étape 10 : Analyser le code avec SonarQube
      - name: Build and analyze with SonarQube
        uses: SonarSource/sonarqube-scan-action@v5
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args: >
            --define sonar.qualitygate.wait=true
            --define sonar.projectKey=${{ secrets.SONAR_PROJECT_KEY }}
            --define sonar.host.url=${{ secrets.SONAR_HOST_URL }}


      - name: Wait for the quality gate result
        run: sleep 5

      - uses: phwt/sonarqube-quality-gate-action@v1
        id: quality-gate-check
        with:
          sonar-project-key: ${{ secrets.SONAR_PROJECT_KEY }}
          sonar-host-url: ${{ secrets.SONAR_HOST_URL }}
          sonar-token: ${{ secrets.SONAR_TOKEN }}
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Output analysis result
        run: |
          echo "${{ steps.quality-gate-check.outputs.project-status }}"
          echo "${{ steps.quality-gate-check.outputs.quality-gate-result }}"