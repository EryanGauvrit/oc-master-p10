name: SonarQube Analysis

# Ce workflow est déclenché lorsqu'il est appelé par un autre workflow
on:
  workflow_call:
    # Secrets pour le workflow
    secrets:
      SONAR_ORGANIZATION:
        required: true
        description: 'SonarQube organization'
      SONAR_TOKEN:
        required: true
        description: 'SonarQube token'
      SONAR_HOST_URL:
        required: true
        description: 'SonarQube server URL'
      SONAR_PROJECT_KEY:
        required: true
        description: 'SonarQube project key'

# Définition des jobs à exécuter dans ce workflow
jobs:

  # Exécute l'analyse du projet avec SonarQube
  analysis:
    name: Projet Analysis with SonarQube
    # S'exécute sur un runner avec une version d'Ubuntu récente
    runs-on: ubuntu-latest

    # Étapes de ce job
    steps:

      # Étape 1 : Récupérer le code du dépôt avec Git
      - uses: actions/checkout@v4
        with:
          # Récupère le code du dépôt avec l'historique complet
          # pour une meilleure pertinence de l'analyse
          fetch-depth: 0

      # Étape 2 : Installer Node.js 18 et récupérer le cache de npm
      - name: Use Node.js 18
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: 'front/package-lock.json'

      # Étape 3 : Installer les dépendances du projet
      - name: Npm install dependencies
        run: npm ci
        working-directory: front

      # Étape 4 : Compiler le frontend
      - name: Build frontend
        run: npm run build
        working-directory: front

      # Étape 5 : Tester le frontend
      - name: Run frontend tests
        run: npm run test:ci
        working-directory: front

      # Étape 6 : Utiliser le cache de SonarQube
      - name: Cache SonarQube packages
        uses: actions/cache@v4
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      # Étape 7 : Analyser le code avec SonarQube
      - name: Build and analyze with SonarQube
        uses: SonarSource/sonarqube-scan-action@v5
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          projectBaseDir: front
          args: >
            --define sonar.organization=${{ secrets.SONAR_ORGANIZATION }}
            --define sonar.projectKey=${{ secrets.SONAR_PROJECT_KEY }}
            --define sonar.host.url=${{ secrets.SONAR_HOST_URL }}
            --define sonar.qualitygate.wait=true

      # Étape 8 : Attendre les résultats de l'analyse
      - name: Wait for the quality gate result
        run: sleep 5

      # Étape 9 : Vérifier le statut de la qualité du code
      - uses: phwt/sonarqube-quality-gate-action@v1
        id: quality-gate-check-pull-request
        if: ${{ github.event_name == 'pull_request' }}
        name: Check Backend SonarQube Quality Gate on Pull Request
        with:
          fail-on-quality-gate-error: true
          pull-request: ${{ github.event.pull_request.number }}
          sonar-project-key: ${{ secrets.SONAR_PROJECT_KEY }}
          sonar-host-url: ${{ secrets.SONAR_HOST_URL }}
          sonar-token: ${{ secrets.SONAR_TOKEN }}
          github-token: ${{ secrets.GITHUB_TOKEN }}

      # Étape 10 : Vérifier le statut de la qualité du code
      - uses: phwt/sonarqube-quality-gate-action@v1
        id: quality-gate-check-branch
        if: ${{ github.event_name != 'pull_request' }}
        name: Check Backend SonarQube Quality Gate on Branch
        with:
          branch: ${{ github.ref_name }}
          fail-on-quality-gate-error: true
          sonar-project-key: ${{ secrets.SONAR_PROJECT_KEY }}
          sonar-host-url: ${{ secrets.SONAR_HOST_URL }}
          sonar-token: ${{ secrets.SONAR_TOKEN }}
          github-token: ${{ secrets.GITHUB_TOKEN }}

      # Étape 11 : Afficher le résultat de l'analyse sur une pull request
      - name: Output pull request analysis result
        if: ${{ steps.quality-gate-check-pull-request.conclusion == 'success' }}
        run: |
          echo "${{ steps.quality-gate-check-pull-request.outputs.project-status }}"
          echo "${{ steps.quality-gate-check-pull-request.outputs.quality-gate-result }}"

      # Étape 12 : Afficher le résultat de l'analyse sur une branche
      - name: Output branch analysis result
        if: ${{ steps.quality-gate-check-branch.conclusion == 'success' }}
        run: |
          echo "${{ steps.quality-gate-check-branch.outputs.project-status }}"
          echo "${{ steps.quality-gate-check-branch.outputs.quality-gate-result }}"

