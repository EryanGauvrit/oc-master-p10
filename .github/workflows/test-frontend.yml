# Nom du workflow
name: test-frontend

# Quand ce workflow doit-il s'exécuter ?
# Dans ce cas, il s'exécutera à chaque push sur votre dépôt.
on: [push]

jobs:
  test-frontend:
    # Indique sur quel type de runner le job doit s'exécuter. Ici, il s'exécutera sur la dernière version d'Ubuntu.
    runs-on: ubuntu-latest
    
    # Définit les commandes par défaut pour ce job.
    # Toutes les commandes `run` de ce job s'exécuteront dans le répertoire "front". 
    defaults:
      run:
        working-directory: front
        
    # La stratégie détermine comment les jobs sont exécutés.
    # Dans ce cas, une matrice est définie pour tester sur différentes versions de Node.js. 
    # Cependant, seule la version 16.x est actuellement listée.
    strategy:
      matrix:
        node-version: [16.x]

    steps:
      # Étape pour vérifier le code du dépôt.
    - uses: actions/checkout@v3

    # Étape pour configurer la version souhaitée de Node.js
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'  # Utilisation du cache npm pour accélérer les installations de dépendances.
        # Spécifie le chemin du fichier de verrouillage des dépendances pour le cache.
        cache-dependency-path: front/package-lock.json

    # Étape pour installer les dépendances du projet.
    - run: npm ci
    # Étape pour exécuter les tests avec la couverture activée
    # La commande npm run test est utilisée pour exécuter les tests. Les flags supplémentaires sont utilisés pour:
    # --no-watch : Assure que le test ne reste pas en mode d'écoute pour les changements
    # --no-progress : Supprime la barre de progression pour un affichage propre dans les logs CI
    # --browsers=ChromeHeadlessCI : Utilise le navigateur Chrome en mode headless (sans UI)
    # --code-coverage : Indique à Angular de générer des rapports de couverture
    - run: npm run test -- --no-watch --no-progress --browsers=ChromeHeadless --code-coverage

    # Étape pour afficher le rapport de couverture
    # Cette étape utilise l'action GitHub "phoenix-actions/test-reporting" pour afficher le rapport de couverture dans GitHub Checks.
    - name: Display Coverage Report      # Nom de l'étape
      uses: phoenix-actions/test-reporting@v8   # L'action GitHub que nous utilisons
      with:                                  # Paramètres fournis à l'action
        name: Angular Test Coverage          # Nom du rapport qui sera affiché dans GitHub Checks
        path: ./coverage/bobapp/report-lcovonly.txt # Emplacement du rapport de couverture généré par Karma
        reporter: lcov                       # Format du rapport. 'lcov' est un format standard pour la couverture du code.
