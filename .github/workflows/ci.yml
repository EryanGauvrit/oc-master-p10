name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  # Job pour tester et build le backend
  backend:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'adopt'

      - name: Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Build Backend
        run: |
          cd back
          mvn clean install
          
      - name: Run Backend Tests with Coverage
        run: |
          cd back
          mvn test

      - name: Generate JaCoCo Coverage Report
        run: |
          cd back
          mvn jacoco:report

      - name: Upload JaCoCo Coverage Report as Artifact
        uses: actions/upload-artifact@v3
        with:
          name: jacoco-coverage-report
          path: back/target/site/jacoco/index.html

      - name: Build Docker image for Backend
        run: |
          cd back
          docker build -t bobapp-back:latest .

      - name: Save Backend Docker image as artifact
        run: docker save bobapp-back:latest | gzip > bobapp-back.tar.gz
      - uses: actions/upload-artifact@v3
        with:
          name: bobapp-back
          path: bobapp-back.tar.gz

  # Job pour tester et build le frontend
  frontend:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install dependencies for ChromeHeadless
        run: |
          sudo apt-get update
          sudo apt-get install -y libnss3 libatk1.0-0 libx11-xcb1 libxcomposite1 libxcursor1 libxdamage1 libxrandr2 libxss1 libxtst6 fonts-liberation libappindicator3-1 libasound2 libgbm1

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 'latest'

      - name: Install dependencies for Frontend
        run: |
          cd front
          npm install

      - name: Run Frontend Tests with Coverage
        run: |
          cd front
          npm run test:ci -- --watch=false --code-coverage

      - name: Upload LCOV Coverage Report as Artifact
        uses: actions/upload-artifact@v3
        with:
          name: lcov-coverage-report
          path: front/coverage/bobapp/lcov.info

      - name: Build Frontend
        run: |
          cd front
          npm run build

      - name: Build Docker image for Frontend
        run: |
          cd front
          docker build -t bobapp-front:latest .

      - name: Save Frontend Docker image as artifact
        run: docker save bobapp-front:latest | gzip > bobapp-front.tar.gz
      - uses: actions/upload-artifact@v3
        with:
          name: bobapp-front
          path: bobapp-front.tar.gz

  # Job pour analyser la qualité du code avec SonarQube
  quality_analysis:
    runs-on: ubuntu-latest
    needs: [backend, frontend]
    steps:
    # Étape 1 : Récupérer le code source
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Pour une analyse complète

    # Étape 2 : Configurer JDK 17
    - name: Set up JDK 11
      uses: actions/setup-java@v4
      with:
        java-version: 11
        distribution: 'zulu'

    # Étape 3 : Démarrer un serveur SonarQube local
    - name: Start SonarQube server
      run: |
        docker run -d --name sonarqube \
          -p 9000:9000 \
          -e SONAR_ES_BOOTSTRAP_CHECKS_DISABLE=true \
          sonarqube:latest
          
    # Attendre que le serveur SonarQube soit prêt
    - name: Wait for SonarQube to be ready
      run: |
        for i in {1..30}; do
          curl -s http://localhost:9000/api/system/status | grep -q '"status":"UP"' && break || sleep 5
        done

    # Étape 3.1 : Créer un token Admin SonarQube
    - name: Generate Admin Token for SonarQube
      run: |
        ADMIN_TOKEN=$(curl -X POST -u admin:admin -d "name=AdminToken" "http://localhost:9000/api/user_tokens/generate" | jq -r '.token')
        echo "SONAR_TOKEN=$ADMIN_TOKEN" >> $GITHUB_ENV

    # Étape 3.2 : Utiliser le token Admin pour des configurations supplémentaires si nécessaire
    - name: Configure SonarQube with Admin Token
      run: |
        curl -u $SONAR_TOKEN: \
          -X POST "http://localhost:9000/api/settings/set" \
          -d "key=sonar.some.configuration&value=some-value"

    # Étape 4 : Mise en cache des packages SonarQube
    - name: Cache SonarQube packages
      uses: actions/cache@v4
      with:
        path: ~/.sonar/cache
        key: ${{ runner.os }}-sonar
        restore-keys: ${{ runner.os }}-sonar

    # Étape 5 : Mise en cache des dépendances Maven
    - name: Cache Maven packages
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2

    # Étape 7 : Analyse du frontend avec SonarQube
    - name: Analyze Frontend with SonarQube
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        SONAR_HOST_URL: http://localhost:9000
      run: |
        cd front
        npx sonar-scanner \
          -Dsonar.projectKey=BobApp-frontend \
          -Dsonar.projectName='BobApp Frontend' \
          -Dsonar.sources=src \
          -Dsonar.tests=src \
          -Dsonar.test.inclusions="**/*.spec.ts" \
          -Dsonar.typescript.lcov.reportPaths=coverage/bobapp/lcov.info \
          -Dsonar.language=TypeScript \
          -Dsonar.host.url=http://localhost:9000 \
          -Dsonar.login=${{ secrets.SONAR_TOKEN }}

    # Étape 6 : Analyse du backend avec SonarQube
    - name: Analyze Backend with SonarQube
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        SONAR_HOST_URL: http://localhost:9000
      run: |
        cd back
        mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar \
            -Dsonar.projectKey=BobApp-backend \
            -Dsonar.projectName='BobApp Backend' \
            -Dsonar.host.url=http://localhost:9000 \
            -Dsonar.login=${{ secrets.SONAR_TOKEN }}

    # Étape 8 : Exporter les résultats d'analyse
    - name: Export SonarQube Results
      run: |
        curl -u ${{ secrets.SONAR_TOKEN }}: http://localhost:9000/api/measures/component?component=BobApp-backend&metricKeys=ncloc,coverage,bugs,vulnerabilities \
        > sonar-backend-results.json
        curl -u ${{ secrets.SONAR_TOKEN }}: http://localhost:9000/api/measures/component?component=BobApp-frontend&metricKeys=ncloc,coverage,bugs,vulnerabilities \
        > sonar-frontend-results.json

    # Étape 9 : Archiver les résultats
    - name: Upload SonarQube Results as Artifacts
      uses: actions/upload-artifact@v3
      with:
        name: sonar-results
        path: |
          sonar-backend-results.json
          sonar-frontend-results.json


  # Job pour déployer sur Docker Hub
  deploy:
    runs-on: ubuntu-latest
    needs: [backend, frontend]
    steps:
      # Étape 1 : Télécharger et charger l'image Docker du backend
      - name: Download Backend Docker image artifact
        uses: actions/download-artifact@v3
        with:
          name: bobapp-back
      - name: Load Backend Docker image
        run: gunzip -c bobapp-back.tar.gz | docker load

      # Étape 2 : Télécharger et charger l'image Docker du frontend
      - name: Download Frontend Docker image artifact
        uses: actions/download-artifact@v3
        with:
          name: bobapp-front
      - name: Load Frontend Docker image
        run: gunzip -c bobapp-front.tar.gz | docker load
  
      # Étape 3 : Se connecter à Docker Hub
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
  
      # Étape 4 : Taguer et pousser l'image Docker du backend
      - name: Tag and Push Backend Docker image
        run: |
          docker tag bobapp-back:latest ${{ secrets.DOCKER_USERNAME }}/bobapp-back:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/bobapp-back:latest
  
      # Étape 5 : Taguer et pousser l'image Docker du frontend
      - name: Tag and Push Frontend Docker image
        run: |
          docker tag bobapp-front:latest ${{ secrets.DOCKER_USERNAME }}/bobapp-front:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/bobapp-front:latest
